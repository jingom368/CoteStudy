# 120809. 배열 두배 만들기 : new int 

class Solution {
    public int[] solution(int[] numbers) {
        int[] answer = new int[numbers.length];
        for(int i=0; i<numbers.length; i++) {
            answer[i] = numbers[i] * 2;
        }
        return answer;
    }
}

# 120814. 피자 나눠 먹기 (1) : Math.ceil

class Solution {
    public double solution(double n) {
        double answer = Math.ceil(n/7);
        return answer;
    }
}

# 120817. 배열의 평균값 : Stream, average, OrElse

import java.util.Arrays;

class Solution {
    public double solution(int[] numbers) { 
        return Arrays.stream(numbers).average().orElse(-1);
    }
}

# 120818. 옷가게 할인 받기 : if

class Solution {
    public int solution(int price) {
        // int answer = 0;
        // if (price >= 10 && price < 100000)
        //     answer = (int) (price);
        // if (price >= 100000 && price < 300000)
        //     answer = (int) (price*(1-0.05));
        // if (price >= 300000 && price < 500000)
        //     answer = (int) (price*(1-0.1));
        // if (price >= 500000)
        //     answer = (int) (price*(1-0.2));
        // return answer;
        
        int answer = 0;

        if(price>=500000) return (int)(price*0.8);
        if(price>=300000) return (int)(price*0.9);
        if(price>=100000) return (int)(price*0.95);

        return price;
    }
}

# 파이썬 : dict
discount_rates = {500000: 0.8, 300000: 0.9, 100000: 0.95, 0: 1}
    for discount_price, discount_rate in discount_rates.items():
        if price >= discount_price:
            return int(price * discount_rate)

# 120821. 배열 뒤집기 : int[], for, length / List<Integer>, Arrays, stream, boxed(), collect(Collectors.toList()), Collections.reverse(list), mapToInt(Integer::intValue)

import java.util.*;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.Arrays;

class Solution {
    public int[] solution(int[] num_list) {
        // int[] answer = new int[num_list.length];
        // for (int i=0; i<num_list.length; i++) {
        //     answer[i] = num_list[num_list.length-1-i];
        // }
        // return answer;
        
        List<Integer> list = Arrays.stream(num_list).boxed().collect(Collectors.toList());
        // boxed() 메소드는 IntStream 같이 원시 타입에 대한 스트림 지원을 클래스 타입(예: IntStream -> Stream<Integer>)으로 전환하여 전용으로 실행 가능한 (예를 들어 본문과 같이 int 자체로는 Collection에 못 담기 때문에 Integer 클래스로 변환하여 List<Integer> 로 담기 위해 등) 기능을 수행하기 위해 존재합니다.
        // Collectors란 "Stream을 일반적인 List, Set등으로 변경시키는 Stream 메서드"라고 입니다.

        Collections.reverse(list);
        // Collections.reverse : 배열을 반대로 해주는
        return list.stream().mapToInt(Integer::intValue).toArray();
        // mapToInt는 Stream<T>타입의 스트림을 기본형 스트림으로 변환할때 아래의 메서드들을 사용한다.
    }
}

// answer = list(reversed(num_list))

# 120824. 짝수 홀수 개수 : (int), Arrays, stream, filter, count

import java.util.Arrays;

class Solution {
    public int[] solution(int[] num_list) {
        int[] answer = {(int) Arrays.stream(num_list).filter(s->s%2==0).count(),(int) Arrays.stream(num_list).filter(s->s%2!=0).count()};
        return answer;
    }
}

# 120829. 각도기 : 삼항 연산자

class Solution {
    public int solution(int angle) {
        // int answer;
        // if (angle < 90) {
        //     answer = 1;
        // }
        // else if (angle == 90) {
        //     answer = 2;
        // }
        // else if (angle > 90 & angle < 180) {
        //     answer = 3;   
        // }
        // else {
        //     answer = 4;
        // }
        // return answer;
        return angle == 180 ? 4 : angle < 180 & angle > 90 ? 3 : angle == 90 ? 2 : 1;
    }
}

# 120831. 짝수의 합 : Stream, range, filter

import java.util.stream.IntStream;

class Solution {
    public int solution(int n) {
        return IntStream.rangeClosed(0,n)
                .filter(s->s%2==0)
                .sum();

    }
}

# 120841. 점의 위치 구하기 : 삼항연산자, &&

class Solution {
    public int solution(int[] dot) {
        return dot[0]>0 && dot[1]>0 ? 1 : dot[0]<0 && dot[1]>0 ? 2 : dot[0]<0 && dot[1]<0 ? 3 : 4;
    }
}

# 120889. 삼각형의 완성조건(1) : Array.sort(), 삼항연산자

import java.util.Arrays;

class Solution {
    public int solution(int[] sides) {
        Arrays.sort(sides);
        return sides[0] + sides[1] > sides[2] ? 1 : 2;
    }
}

// answer = [1 if sorted(sides)[0] + sorted(sides)[1] > sorted(sides)[2] else 2][0]

# 120898. 편지 : length()

class Solution {
    public int solution(String message) {
        int answer = message.length()*2;
        return answer;
    }
}
